{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to spatialcsv","text":"<p>Easily add location points to a map from a csv</p> <ul> <li>Free software: GNU General Public License v3</li> <li>Documentation: https://TJHomer.github.io/spatialcsv</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/TJHomer/spatialcsv/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>spatialcsv could always use more documentation, whether as part of the official spatialcsv docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/TJHomer/spatialcsv/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up spatialcsv for local development.</p> <ol> <li> <p>Fork the spatialcsv repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/spatialcsv.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv spatialcsv\n$ cd spatialcsv/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 spatialcsv tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/TJHomer/spatialcsv/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install spatialcsv, run this command in your terminal:</p> <pre><code>pip install spatialcsv\n</code></pre> <p>This is the preferred method to install spatialcsv, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for spatialcsv can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/TJHomer/spatialcsv\n</code></pre>"},{"location":"spatialcsv/","title":"spatialcsv module","text":""},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points","title":"<code> Points        </code>","text":"Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>class Points:\n\n    def __init__(self, csv, coords, **kwargs):\n'''\n        Main class for spatialcsv\n        Args:\n        csv: filepath or url to csv file\n        coords: list with header titles indicating latitude and longitude\n            example: coords=['lat', 'long']\n        tags (optional): If displaying on leafmap,\n            these will show up as info when the point is selected\n            list with header titles indicating tags\n            example: tags=['city', 'pop']\n        epsg (optional): Will automatically process lat/long degree or decimal,\n            if coordinates are in x/y, will assume epsg:3857\n            If this is not your crs, indicate here\n            example: epsg='2274'\n        '''\n        self.csv = csv\n        self.coords = coords\n        self.df = pd.read_csv(csv, header=0, index_col=False)\n        if \"tags\" not in kwargs:\n            self.tags = self.get_header()\n        else:\n            self.tags = kwargs[\"tags\"]\n        if \"epsg\" not in kwargs:\n            kwargs[\"epsg\"] = 3857\n            self.epsg = 3857\n        else:\n            self.epsg = kwargs[\"epsg\"]\n\n        self.df = self.lat_long()\n\n\n    def remove_null(self):\n'''\n        Removes lines that have empty coordinates. \n        Empty coordinates cause problems with streamlit\n        '''\n\"\"\"\n        for index, row in self.df.iterrows():\n            if pd.isna(row[self.coords[0]]) or pd.isna(row[self.coords[1]]):\n                self.df.drop([index, 0], inplace=True)\n        \"\"\"\n        self.df.dropna(axis=0, how='any', subset=[self.coords[0], self.coords[1]], inplace=True)\n        return(self.df)\n\n\n    def to_streamlit(self):\n'''\n        renames columns so that it can be added to streamlit app\n        '''\n        self.remove_null()\n        self.df.rename(columns={self.coords[0]:'lat', self.coords[1]:'lon'}, inplace=True) \n        return(self.df)\n\n\n    def to_leafmap(self):\n'''\n        Selects what information you want displayed on the leafmap marker\n        '''\n        drops = []\n        for item in list(self.df.columns):\n            if item not in self.coords and item not in self.tags:\n                self.df.drop(columns=[item], inplace=True)\n        return(self.df)\n\n\n    def get_header(self):\n'''\n        returns header row\n        '''\n        return(list(self.df.columns))\n\n\n    def lat_long(self):\n        #checks everything in lat/long decimal format:\n        test_df = self.df.get(self.coords)\n        for item in self.df[self.coords[0]].to_list():\n            if 'S' in str(item) or 'N' in str(item):\n                self.df = self.degree_to_decimal()\n                return(self.df)\n            elif int(item) &gt; 180:\n                self.df = self.change_proj()\n                return(self.df)\n            else:\n                return(self.df)\n\n\n    def updated_csv(self, file_name):\n'''\n        Outputs the processed csv into a new csv\n        '''\n        self.df.to_csv(file_name, index=False)\n\n\n\n\n    def degree_to_decimal(self):\n'''\n        Changes the coordinates in the csv from degree format to decimal\n        '''\n        temp_df = self.df.get(self.coords)\n        listlat = []\n        listlong = []\n        for item in self.df[self.coords[0]].to_list():\n            listlat.append(dms2dec(item))\n        for item in self.df[self.coords[1]].to_list():\n            listlong.append(dms2dec(item)) \n        temp_df[self.coords[0]] = self.df[self.coords[0]].replace(\n                self.df[self.coords[0]].to_list(), listlat)\n        self.df[self.coords[0]] = temp_df[self.coords[0]]\n        temp_df[self.coords[1]] = self.df[self.coords[1]].replace(\n                self.df[self.coords[1]].to_list(), listlong)\n        self.df[self.coords[1]] = temp_df[self.coords[1]]\n        return(self.df)\n\n\n    def change_proj(self):\n'''\n        Changes the projection from what is given to lat/long epsg:4326\n        '''\n        transformer = Transformer.from_crs(self.epsg, 4326)\n        listlat = []\n        listlong = []\n        listlat, listlong = transformer.transform(\n                self.df[self.coords[0]].values, \n                self.df[self.coords[1]].values)\n        self.df[self.coords[0]] = listlat\n        self.df[self.coords[1]] = listlong\n        return(self.df)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.__init__","title":"<code>__init__(self, csv, coords, **kwargs)</code>  <code>special</code>","text":"<p>Main class for spatialcsv</p> <p>csv: filepath or url to csv file !!! coords \"list with header titles indicating latitude and longitude\"     example: coords=['lat', 'long'] tags (optional): If displaying on leafmap,     these will show up as info when the point is selected     list with header titles indicating tags     example: tags=['city', 'pop'] epsg (optional): Will automatically process lat/long degree or decimal,     if coordinates are in x/y, will assume epsg:3857     If this is not your crs, indicate here     example: epsg='2274'</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def __init__(self, csv, coords, **kwargs):\n'''\n    Main class for spatialcsv\n    Args:\n    csv: filepath or url to csv file\n    coords: list with header titles indicating latitude and longitude\n        example: coords=['lat', 'long']\n    tags (optional): If displaying on leafmap,\n        these will show up as info when the point is selected\n        list with header titles indicating tags\n        example: tags=['city', 'pop']\n    epsg (optional): Will automatically process lat/long degree or decimal,\n        if coordinates are in x/y, will assume epsg:3857\n        If this is not your crs, indicate here\n        example: epsg='2274'\n    '''\n    self.csv = csv\n    self.coords = coords\n    self.df = pd.read_csv(csv, header=0, index_col=False)\n    if \"tags\" not in kwargs:\n        self.tags = self.get_header()\n    else:\n        self.tags = kwargs[\"tags\"]\n    if \"epsg\" not in kwargs:\n        kwargs[\"epsg\"] = 3857\n        self.epsg = 3857\n    else:\n        self.epsg = kwargs[\"epsg\"]\n\n    self.df = self.lat_long()\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.change_proj","title":"<code>change_proj(self)</code>","text":"<p>Changes the projection from what is given to lat/long epsg:4326</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def change_proj(self):\n'''\n    Changes the projection from what is given to lat/long epsg:4326\n    '''\n    transformer = Transformer.from_crs(self.epsg, 4326)\n    listlat = []\n    listlong = []\n    listlat, listlong = transformer.transform(\n            self.df[self.coords[0]].values, \n            self.df[self.coords[1]].values)\n    self.df[self.coords[0]] = listlat\n    self.df[self.coords[1]] = listlong\n    return(self.df)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.degree_to_decimal","title":"<code>degree_to_decimal(self)</code>","text":"<p>Changes the coordinates in the csv from degree format to decimal</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def degree_to_decimal(self):\n'''\n    Changes the coordinates in the csv from degree format to decimal\n    '''\n    temp_df = self.df.get(self.coords)\n    listlat = []\n    listlong = []\n    for item in self.df[self.coords[0]].to_list():\n        listlat.append(dms2dec(item))\n    for item in self.df[self.coords[1]].to_list():\n        listlong.append(dms2dec(item)) \n    temp_df[self.coords[0]] = self.df[self.coords[0]].replace(\n            self.df[self.coords[0]].to_list(), listlat)\n    self.df[self.coords[0]] = temp_df[self.coords[0]]\n    temp_df[self.coords[1]] = self.df[self.coords[1]].replace(\n            self.df[self.coords[1]].to_list(), listlong)\n    self.df[self.coords[1]] = temp_df[self.coords[1]]\n    return(self.df)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.get_header","title":"<code>get_header(self)</code>","text":"<p>returns header row</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def get_header(self):\n'''\n    returns header row\n    '''\n    return(list(self.df.columns))\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.remove_null","title":"<code>remove_null(self)</code>","text":"<p>Removes lines that have empty coordinates.  Empty coordinates cause problems with streamlit</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def remove_null(self):\n'''\n    Removes lines that have empty coordinates. \n    Empty coordinates cause problems with streamlit\n    '''\n\"\"\"\n    for index, row in self.df.iterrows():\n        if pd.isna(row[self.coords[0]]) or pd.isna(row[self.coords[1]]):\n            self.df.drop([index, 0], inplace=True)\n    \"\"\"\n    self.df.dropna(axis=0, how='any', subset=[self.coords[0], self.coords[1]], inplace=True)\n    return(self.df)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.to_leafmap","title":"<code>to_leafmap(self)</code>","text":"<p>Selects what information you want displayed on the leafmap marker</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def to_leafmap(self):\n'''\n    Selects what information you want displayed on the leafmap marker\n    '''\n    drops = []\n    for item in list(self.df.columns):\n        if item not in self.coords and item not in self.tags:\n            self.df.drop(columns=[item], inplace=True)\n    return(self.df)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.to_streamlit","title":"<code>to_streamlit(self)</code>","text":"<p>renames columns so that it can be added to streamlit app</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def to_streamlit(self):\n'''\n    renames columns so that it can be added to streamlit app\n    '''\n    self.remove_null()\n    self.df.rename(columns={self.coords[0]:'lat', self.coords[1]:'lon'}, inplace=True) \n    return(self.df)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.Points.updated_csv","title":"<code>updated_csv(self, file_name)</code>","text":"<p>Outputs the processed csv into a new csv</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def updated_csv(self, file_name):\n'''\n    Outputs the processed csv into a new csv\n    '''\n    self.df.to_csv(file_name, index=False)\n</code></pre>"},{"location":"spatialcsv/#spatialcsv.spatialcsv.get_cols","title":"<code>get_cols(data)</code>","text":"<p>for getting the column header while still in csv format</p> Source code in <code>spatialcsv/spatialcsv.py</code> <pre><code>def get_cols(data):\n'''\n    for getting the column header while still in csv format\n    '''\n    df = pd.read_csv(data, header=0, index_col=False)\n    return(list(df.columns))\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use spatialcsv in a project:</p> <pre><code>import spatialcsv\n</code></pre>"},{"location":"examples/example/","title":"Basic Example","text":"In\u00a0[1]: Copied! <pre># Uncomment to install\n#!pip install leafmap spatialcsv geopandas\n\nimport leafmap\nimport spatialcsv\nimport requests\nimport geopandas\n\n\n# This function will allow us to preview the csv before processing\ndef preview(url):\n    response = requests.get(url)\n    for line in response.text.splitlines()[:4]:\n        print(line)\n</pre> # Uncomment to install #!pip install leafmap spatialcsv geopandas  import leafmap import spatialcsv import requests import geopandas   # This function will allow us to preview the csv before processing def preview(url):     response = requests.get(url)     for line in response.text.splitlines()[:4]:         print(line)      <p>This package takes csv files and standardizes them for web mapping. It will automatically change coordidantes from degree,minute format to decimal.</p> <p>If using streamlit, it will change the column headers to what streamlit uses, and remove any empty coordinate fields (which causes streamlit to error out). To view in streamlit, go to https://spatialcsv.streamlit.app/</p> <p>If using leafmap, you can add the following arguments:</p> <ul> <li>tags = [ ]    Will select what columns are included in the pin popup</li> <li>epsg = '####'    Will reproject from given crs to lat/long coordinates</li> </ul> <p>If you don't want to use a web map, but only want to convert all the coordinates, there is also a function <code>updated_csv()</code> that will export it back to an csv file.</p> In\u00a0[2]: Copied! <pre>m1 = leafmap.Map()\nfp1 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/test.csv'\npreview(fp1)\n</pre> m1 = leafmap.Map() fp1 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/test.csv' preview(fp1) <pre>City,State,lat,long\nArizona,Phoenix,33.448143,-112.096962\nArkansas,Little Rock,34.746613,-92.288986\nCalifornia,Sacramento,38.576668,-121.493629\n</pre> In\u00a0[3]: Copied! <pre>points1 = spatialcsv.Points(fp1, ['lat', 'long'])\npoints1.df.head()\n</pre> points1 = spatialcsv.Points(fp1, ['lat', 'long']) points1.df.head() Out[3]: City State lat long 0 Arizona Phoenix 33.448143 -112.096962 1 Arkansas Little Rock 34.746613 -92.288986 2 California Sacramento 38.576668 -121.493629 3 Colorado Denver 39.739227 -104.984856 4 Connecticut Hartford&lt;br&gt; 41.764046 -72.682198 In\u00a0[4]: Copied! <pre>data1 = points1.to_leafmap()\nm1.add_points_from_xy(data1, x='long', y='lat')\nm1\n</pre> data1 = points1.to_leafmap() m1.add_points_from_xy(data1, x='long', y='lat') m1 In\u00a0[5]: Copied! <pre>m2 = leafmap.Map()\nfp2 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/dms.csv'\npreview(fp2)\n</pre> m2 = leafmap.Map() fp2 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/dms.csv' preview(fp2) <pre>State Capital,lat,long\nTallahassee,30\u00b027'N, 84\u00b016'W\nRaleigh,35\u00b046'N, 78\u00b039'W\nAustin,30\u00b014'N, 97\u00b045'W\n</pre> In\u00a0[6]: Copied! <pre>points2 = spatialcsv.Points(fp2, ['lat', 'long'])\npoints2.df.head()\n</pre> points2 = spatialcsv.Points(fp2, ['lat', 'long']) points2.df.head() Out[6]: State Capital lat long 0 Tallahassee 30.450000 -84.266667 1 Raleigh 35.766667 -78.650000 2 Austin 30.233333 -97.750000 3 Sacramento 38.900000 -121.483333 4 Richmond 37.533333 -77.450000 In\u00a0[7]: Copied! <pre>data2 = points2.to_leafmap()\nm2.add_points_from_xy(data2, x='long', y='lat')\nm2\n</pre> data2 = points2.to_leafmap() m2.add_points_from_xy(data2, x='long', y='lat') m2 In\u00a0[8]: Copied! <pre>m3 = leafmap.Map()\nfp3 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/projected_2274.csv'\npreview(fp3)\n</pre> m3 = leafmap.Map() fp3 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/projected_2274.csv' preview(fp3) <pre>ObjectID,X,Y,School,City,GradeLevels\n1,767637.23167577,315674.50617952,1ST CLASS MONTESSORI - MEMPHIS,Memphis,\"PK,K\"\n2,828609.47361461,327549.00838232,1ST CLASS MONTESSORI SCHOOL - CORDOVA,Cordova,\"PK,K,1,2,3\"\n3,757231.10957349,307890.57621781,A B HILL ELEMENTARY,Memphis,\"PK,K,1,2,3,4,5\"\n</pre> In\u00a0[9]: Copied! <pre>points3 = spatialcsv.Points(fp3, ['X', 'Y'], epsg='2274')\npoints3.df.head()\n</pre> points3 = spatialcsv.Points(fp3, ['X', 'Y'], epsg='2274') points3.df.head() Out[9]: ObjectID X Y School City GradeLevels 0 1 35.132828 -90.017079 1ST CLASS MONTESSORI - MEMPHIS Memphis PK,K 1 2 35.172125 -89.814876 1ST CLASS MONTESSORI SCHOOL - CORDOVA Cordova PK,K,1,2,3 2 3 35.110283 -90.050772 A B HILL ELEMENTARY Memphis PK,K,1,2,3,4,5 3 4 36.387252 -85.319641 A H ROBERTS ELEMENTARY Livingston PK,K,1,2,3,4 4 5 35.882628 -84.083299 A L LOTTS ELEMENTARY Knoxville K,1,2,3,4,5 In\u00a0[10]: Copied! <pre>data3 = points3.to_leafmap()\nm3.add_points_from_xy(data3, x='Y', y='X')\nm3\n</pre> data3 = points3.to_leafmap() m3.add_points_from_xy(data3, x='Y', y='X') m3 In\u00a0[11]: Copied! <pre>m4 = leafmap.Map()\nfp4 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/tags.csv'\npreview(fp4)\n</pre> m4 = leafmap.Map() fp4 = 'https://github.com/TJHomer/spatialcsv/raw/main/spatialcsv/example_files/tags.csv' preview(fp4) <pre>name,sov_a3,latitude,longitude,pop_max,region\nSan Bernardino,USA,34.12038,-117.30003,1745000,West\nBridgeport,USA,41.17998,-73.19996,1018000,Northeast\nRochester,USA,43.17043,-77.61995,755000,Northeast\n</pre> In\u00a0[12]: Copied! <pre>points4 = spatialcsv.Points(fp4, ['latitude', 'longitude'], tags=['name', 'pop_max'])\npoints4.df.head()\n</pre> points4 = spatialcsv.Points(fp4, ['latitude', 'longitude'], tags=['name', 'pop_max']) points4.df.head() Out[12]: name sov_a3 latitude longitude pop_max region 0 San Bernardino USA 34.12038 -117.30003 1745000 West 1 Bridgeport USA 41.17998 -73.19996 1018000 Northeast 2 Rochester USA 43.17043 -77.61995 755000 Northeast 3 St. Paul USA 44.94399 -93.08497 734854 Midwest 4 Billings USA 45.78830 -108.54000 104552 West In\u00a0[13]: Copied! <pre>data4 = points4.to_leafmap()\nm4.add_points_from_xy(data4, x='longitude', y='latitude')\nm4\n# Click on the location icon to see selected tags\n</pre> data4 = points4.to_leafmap() m4.add_points_from_xy(data4, x='longitude', y='latitude') m4 # Click on the location icon to see selected tags In\u00a0[14]: Copied! <pre>#enter a filepath and uncomment to download one of the updated csvs\n\nfilepath = 'updated.csv'\n\npoints2.updated_csv(filepath)\n</pre> #enter a filepath and uncomment to download one of the updated csvs  filepath = 'updated.csv'  points2.updated_csv(filepath) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/example/#basic-example","title":"Basic Example\u00b6","text":""},{"location":"examples/example/#example-changing-from-degree-to-decimal-format","title":"Example changing from degree to decimal format\u00b6","text":""},{"location":"examples/example/#example-changing-projection","title":"Example changing projection\u00b6","text":""},{"location":"examples/example/#example-assigning-tags","title":"Example assigning tags\u00b6","text":""},{"location":"examples/example/#downloading-updated-csv","title":"Downloading updated csv\u00b6","text":""}]}